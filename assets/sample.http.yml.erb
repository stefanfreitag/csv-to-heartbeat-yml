- type: http
  id: http-<%= environment.downcase %>-<%= team.downcase %>-<%= application.downcase %>-<%= service.downcase %>

  name: <%= application.downcase %> <%= service.downcase %>
  schedule: '@every <%= schedule %>s'
  hosts: [ <%= endpoints.downcase.split(',').uniq.join(',').gsub(/[^,]+/, "'\\0'") %> ]
  ipv4: true
  timeout: <%= timeout %>s
  # Request settings:
  #check.request:
  # Configure HTTP method to use. Only 'HEAD', 'GET' and 'POST' methods are allowed.
  method: "GET"
  
  response.include_body: always
  response.include_body_max_bytes: 2048
  
  # Expected response settings
  check.response:
    # Expected status code. If not configured or set to 0 any status code not
    # being 404 is accepted.
    status: 200

    # Parses the body as JSON, then checks against the given condition expression
    #json:
    #- description: Explanation of what the check does
    #  condition:
    #    equals:
    #      myField: expectedValue

  # The tags of the monitors are included in their own field with each
  # transaction published. Tags make it easy to group servers by different
  # logical properties.
  tags: [<%= tags.downcase.split(',').uniq.join(',').gsub(/[^,]+/, "'\\0'") %>]

  # Optional fields that you can specify to add additional information to the
  # monitor output. Fields can be scalar values, arrays, dictionaries, or any nested
  # combination of these.
  fields:
    team: <%= team.upcase %>
    environment: <%= environment.upcase %>
    application: <%= application.upcase %>
    service_name: <%= service.upcase %>

  # If this option is set to true, the custom fields are stored as top-level
  # fields in the output document instead of being grouped under a fields
  # sub-dictionary. Default is false.
  fields_under_root: true
